## 表示立方体状态

每个多维数据集都由一个方面表示。相关方面的编号如下：

![img](nums.png)

边小平面有24个位置，角小平面有24个位置。职位标签如下：

![img](pos.png)

12个边缘的位置被存储在阵列*的边缘*和所述8个角的位置存储在所述阵列*的角落*。

UF边缘立方体的U小平面的位置存储在edge [0]中，UR立方体立方体的U小平面的位置存储在edge [1]中，依此类推。类似地，UFR角形立方体的U面的位置在corners [0]中，URB角形立方体的U面的位置在corners [1]中，依此类推。

求解的多维数据集的边数组为{0，1，2，3，8，9，10，11，20，21，22，23}，角数组为{0，1，2，3，20，21， 22，23}。在移动R +之后，所得数组为{0，13，2，3，1，17，10，11，20，8，22，23}和{9，17，2，2，3，4，12，22， 23}。

## 解法

该程序使用人类从未使用过的方法来解决多维数据集。但是，由于它具有高度重复性，因此非常适合计算机。（也很容易编写代码！）一次解决一个多维数据集，将未解决的多维数据集限制在越来越少的位置，直到解决整个多维数据集为止。方法如下：

```
  for i = 1 to 4 {
    solve the DF edge
    rotate cube
  }
  for i = 1 to 4 {
    solve the DRF corner
    rotate cube
  }
  for i = 1 to 4 {
    solve the FR edge
    rotate cube
  }
  for i = 1 to 4
    solve the URF corner
    rotate cube
  }
  for i = 1 to 4
    solve the UF edge
    rotate cube
  }
```

其中*rotate*是在U形转弯方向上的立方体旋转。使用此方法通常可以解决大约105个动作*

## 编码算法

为了减小程序大小，对算法进行了编码。在以前的版本中，每个动作都被赋予一个数字，并且数字阵列代表一种算法。在此版本中，算法被转换为长整数。

首先，为移动分配以下值：

```
      X + X2 X-
  ----------------
   1 2 3
   R 4 5 6
   B 7 8 9
   L 10 11 12
   U 13 14 15
   D 16 17 18
```

对于算法R + U + R-，我将其转换为整数，如下所示：

4 * 19 0 + 13 * 19 1 + 6 * 19 2 + 0 * 19 3 + 0 * 19 4 + 0 * 19 5 + 0 * 19 6 = 2417

零表示算法结束。较长的算法分为7个步骤。